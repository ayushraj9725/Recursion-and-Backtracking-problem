
Problem : Sum of N natural Numbers

Problem Statement :

Given an integer n, your task is to compute the sum of all natural numbers from 1 to n (inclusive). If n is 0, the sum should be 0.

Examples:

Input: n = 3
Output: 6
Explanation: For n = 3, the sum will be 6. 1 + 2 + 3 = 6.

Input: n = 5
Output: 15
Explanation: For n = 5, the sum will be 15. 1 + 2 + 3 + 4 + 5 = 15.

Constraints:
1 ≤ n ≤ 104

/////////////////////////////  C++ SOLUTION UISNG RECURSION   //////////////////////

class Solution {
  public:
    int findSum(int n) {
        // code here
        
        if(n == 0){
            return 0 ;
        }
        
        return findSum(n-1) + n ;
        
    }
};

TIME COMPLEXITY : O(N)   and    SPACE COMPLEXITY : O(N) for stack used internally for recusive calling 

//////////////////////////////  JAVA SOLUTION   /////////////////////////////

    public static int recurSum(int n)
    {
        // base case
        if (n == 0)
            return n;
            // recursive case
        return n + recurSum(n - 1);
    }
    
    // Driver code
    public static void main(String args[])
    {
        int n = 3;
        System.out.println(recurSum(n));
    }

