 Problem : Reverse Number

 Problem Statement : 
  
 Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.

 Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

Example 1:

Input: x = 123
Output: 321
Example 2:

Input: x = -123
Output: -321
Example 3:

Input: x = 120
Output: 21
 

Constraints:
-231 <= x <= 231 - 1


/**************************************************   C++ SOLUTION RECURSIVE APPROACH  ************************************************/

class Solution {
public:
    // Using Recursion
    
    int solve(int x , int rev = 0){
      
        if(x == 0) return rev ;
        if(rev > INT_MAX / 10) return 0 ; // prevent from integer overflow
        if(rev < INT_MIN / 10) return 0 ; // ''
        rev = rev * 10 + (x % 10);
        return solve(x/10,rev);
      
    }
    int reverse(int x) {
        
      int rev = solve(x,0);
      return rev ;

    }
};

TIME COMPLEXITY : O(log10N) AND SPACE COMPLEXITY : O(D)  shows reminder calculation 

/***********************************************   ITERATIVE APPROACH TRY YOURSELF ****************************************/
