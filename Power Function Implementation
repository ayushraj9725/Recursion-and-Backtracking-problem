
Problem : Power Function Implementation

Problem Statement : 

Implement pow(x, n), which calculates x raised to the power n (i.e., xn).

Example 1:
Input: x = 2.00000, n = 10
Output: 1024.00000

Example 2:
Input: x = 2.10000, n = 3
Output: 9.26100

Example 3:
Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25

Constraints:

-100.0 < x < 100.0
-231 <= n <= 231-1
n is an integer.
Either x is not zero or n > 0.
-104 <= xn <= 104


/*************************************************************  C++ SOLUTION  ******************************************************/

USING RECURSION  

class Solution {
public:
    double myPow(double x, int n) {
        // Using recursione and backtracking we solve this problem 
         // Handle the edge case where n is INT_MIN
        if (n == INT_MIN) {
            x = x * x;  // Multiply x by x first
            n = n / 2;  // Divide n by 2 to avoid overflow
        }
        
        //base condition 
        if(n == 0) return 1 ;
        if(n < 0) return (1.0 / myPow(x,-n)); // call making -ve to the mPow

        // now deal with the n  Positive 

         double ans = myPow(x,n/2); // calling again and again and stored in ans 

         if(n % 2 == 0){
            // if n / power is even then simple we multiply and return 
            return ans  * ans ;
         } // otherwise we return the value 
         else{
            return x * ans  * ans  ; // to the previous calling method 
         }
         // Time complexity : (logn) and space complexity : O(logn) for stack depth using 
    }
};


/***************************************************************  JAVA Solution ****************************************************** /

Iterative Appraoch  :  Time Complexity : O(log10N)  and Space : O(1) 

class Solution {
    public double myPow(double x, int n) {
        
        double ans = 1 ;
        double temp = n ;
        
        if(x == 0 || x == 1) return x ;

         if(temp < 0){
            x = 1 / x ;
            n = -(n+1) ;
            ans = ans * x  ;
         }
        
        while(n > 0){
            if(n % 2 == 1){
                ans = ans * x ;
                n = n - 1 ;
            }
            else{
                n = n/2 ;
                x = x * x ;
            }
        }
       
        return ans ;

        /*double p = Math.pow(x,n);
      this is not optimal answer 
        return p ;  */
    }
}
